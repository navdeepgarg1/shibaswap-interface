{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 79377087078960,\n  MOONBASE = 1287,\n  AVALANCHE = 43114,\n  FUJI = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  PUPPYNET = 917\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\n// TODO REMOVE\nexport const INIT_CODE_HASH: string = '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n// TODO GOLIVE\nexport const SHIBA_CODE_HASH: string = '0x65d1a3b1e46c6e4f1be1ad5f99ef14dc488ae0549dc97db9b30afe2241ce1c7a'\n// TODO REMOVE\nexport const SUSHI_FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FUJI]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PUPPYNET] : '0xc35DADB65012eC5796536bD9864eD8773aBc74C4'\n}\n\nexport const SHIBASWAP_FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x115934131916C8b277DD010Ee02de363c09d037c',\n  [ChainId.ROPSTEN]: '0x1DFA4F89acD5cc33A100AD1347970bA9E91737Cb',\n  [ChainId.RINKEBY]: '0x115934131916C8b277DD010Ee02de363c09d037c',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x4fa1932a7fd78C2446842dc00567bFF1D192DB07',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.PUPPYNET] : '0x4fa1932a7fd78C2446842dc00567bFF1D192DB07'\n}\n\n\nexport const SHIBASWAP_ROUTER_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x03f7724180AA6b939894B5Ca4314783B0b36b329',\n  [ChainId.RINKEBY]: '0x03f7724180AA6b939894B5Ca4314783B0b36b329',\n  [ChainId.ROPSTEN]: '0x4B0d61C160572CAcC0A20D2dbeF6E0138bf58681',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0xbe2B7BC93EF34994E5d7342cF3c8cC9f1fd51109',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.PUPPYNET] : '0xbe2B7BC93EF34994E5d7342cF3c8cC9f1fd51109'\n}\n\n\nexport const SHIBASWAP_BONE_TOKEN_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x9813037ee2218799597d83D4a5B6F3b6778218d9',\n  [ChainId.ROPSTEN]: '0xD514244ED479A2050c44B448Ec681FaADd8c7429',\n  [ChainId.RINKEBY]: '0x9813037ee2218799597d83D4a5B6F3b6778218d9',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x6d4bB7b0559Aebfc55A42cFEAAeb287c01a7f244',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.PUPPYNET] : '0x6d4bB7b0559Aebfc55A42cFEAAeb287c01a7f244'\n}\n\n\nexport const SHIBASWAP_BURY_BONE_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xf7A0383750feF5AbaCe57cc4C9ff98e3790202b3',\n  [ChainId.ROPSTEN]: '0x06C2c70e62F74e7d52a5D49375F86a0773269d2B',\n  [ChainId.RINKEBY]: '0xf7A0383750feF5AbaCe57cc4C9ff98e3790202b3',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x0306c12Bf48ccB3031eef5EFF335d468a40dd6a5',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.PUPPYNET] : '0x0306c12Bf48ccB3031eef5EFF335d468a40dd6a5'\n}\n\n\nexport const SHIBASWAP_BURY_LEASH_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xa57D319B3Cf3aD0E4d19770f71E63CF847263A0b',\n  [ChainId.ROPSTEN]: '0x08a200091c55086a8064DbC4bbC0bea1DC338956',\n  [ChainId.RINKEBY]: '0xa57D319B3Cf3aD0E4d19770f71E63CF847263A0b',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x1309B57240BD3A93750806E3d73aa30b3a6885E2',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.PUPPYNET] : '0x1309B57240BD3A93750806E3d73aa30b3a6885E2'\n}\n\n\nexport const SHIBASWAP_BURY_SHIB_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xB4a81261b16b92af0B9F7C4a83f1E885132D81e4',\n  [ChainId.ROPSTEN]: '0x0cf138243F0E2Fc20b7065b5DA84E467fb7816C1',\n  [ChainId.RINKEBY]: '0xB4a81261b16b92af0B9F7C4a83f1E885132D81e4',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x9DF7a6c4c34C70949feA6e6dB2d475bCaffEaa2C',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.PUPPYNET] : '0x9DF7a6c4c34C70949feA6e6dB2d475bCaffEaa2C'\n}\n\n\nexport const BONE_LOCKER_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0xa404F66B9278c4aB8428225014266B4B239bcdc7',\n  [ChainId.ROPSTEN]: '0x951AbEe165d76F4CAbCB7e053a69CDd581d615f1',\n  [ChainId.RINKEBY]: '0xa404F66B9278c4aB8428225014266B4B239bcdc7',\n  [ChainId.KOVAN]: '0xA18529a564ED8d6EeDDFd468104f321b5844d83a',\n  [ChainId.PUPPYNET] : '0xA18529a564ED8d6EeDDFd468104f321b5844d83a'\n}\n\n\nexport const SHIBASWAP_TOPDOG_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x94235659cF8b805B2c658f9ea2D6d6DDbb17C8d7',\n  [ChainId.ROPSTEN]: '0xA897676603C7aD3E6037a11B5294dD5B3B54AD71',\n  [ChainId.RINKEBY]: '0x94235659cF8b805B2c658f9ea2D6d6DDbb17C8d7',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0xa58C58fC67648924314D021033b709a475F2702D',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.PUPPYNET] : '0xa58C58fC67648924314D021033b709a475F2702D'\n}\n\n\nexport const SHIBASWAP_UNI_FETCH_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x0E906A0A798429fe5aA81e5052a5898dD0473907',\n  [ChainId.ROPSTEN]: '0xB50De2156E3EC63a21f23E9AB6B86BDa298565bA',\n  [ChainId.RINKEBY]: '0x0E906A0A798429fe5aA81e5052a5898dD0473907',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x00E7Bed38d154E855b32D773ceB34C73872b3CBF',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.PUPPYNET] : '0x00E7Bed38d154E855b32D773ceB34C73872b3CBF'\n}\n\n\nexport const SHIBASWAP_SUSHI_FETCH_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xb77Ff862c4f02509D44A75C9543237D68EC6c1bd',\n  [ChainId.ROPSTEN]: '0x5B25D81178e7fD2BDe3F6173847ecbA5450b59b4',\n  [ChainId.RINKEBY]: '0xb77Ff862c4f02509D44A75C9543237D68EC6c1bd',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x5B9537FC6aBa6bA3170aC1BDE76a586E4d1269d7',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.PUPPYNET] : '0x5B9537FC6aBa6bA3170aC1BDE76a586E4d1269d7'\n}\n\n\nexport const SHIBA_DASHBOARD_1_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x318A278711fc24f32550Af30E772686BBeE34141',\n  [ChainId.ROPSTEN]: '0x06E241217525A421e266D8B37823CF6AAa634EB2',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x52e37981D941D13072870d58Ed7cC9c9f50F0C4c',\n  [ChainId.PUPPYNET] : '0x52e37981D941D13072870d58Ed7cC9c9f50F0C4c'\n}\n\n\nexport const SHIBA_DASHBOARD_2_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x0Ea28D1cE1198B4Af8a84E5c08c94A907F34AdCE',\n  [ChainId.ROPSTEN]: '0x87F1e3A5A71F3e351F1037d1dCB64D0dbbAD26E1',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x695F54EE70b98DC971554034139cd9b78E771a11',\n  [ChainId.PUPPYNET] : '0x695F54EE70b98DC971554034139cd9b78E771a11'\n}\n\n\nexport const SHIBASWAP_SHIB_TOKEN_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  [ChainId.ROPSTEN]: '0xeBAdA3F2883F226BAE65fc0A6404916E965196b5',\n  [ChainId.RINKEBY]: '0x658f8c0456265DB1a5fC6BC0A7e8eFd6Fa7F302F',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x0b2367E0e56Fd9b63388F1478830c8a4b1bA5963',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.PUPPYNET] : '0x0b2367E0e56Fd9b63388F1478830c8a4b1bA5963'\n}\n\n\nexport const SHIBASWAP_LEASH_TOKEN_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x27C70Cd1946795B66be9d954418546998b546634',\n  [ChainId.ROPSTEN]: '0x806b97D788D401aC2139413b5Aa42E5d408DF572',\n  [ChainId.RINKEBY]: '0xe74ffE1299D39231058C8B6F5AdE8BbF74eeed72',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0xf90e84b13FaA6a50A5c361a8d35019C4236b1582',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.PUPPYNET] : '0xf90e84b13FaA6a50A5c361a8d35019C4236b1582'\n}\n\n// Mostly not needed\n// TODO GOLIVE TOCHECK\nexport const SHIBASWAP_TIMELOCK_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.PUPPYNET] : ''\n}\n\n// TODO GOLIVE\nexport const SHIBA_BORING_HELPER_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '',\n  [ChainId.ROPSTEN]: '0x7F561103db907D9865814E8fFFb0cee29BD1B414', // TODO TEMP\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x7F561103db907D9865814E8fFFb0cee29BD1B414',\n  [ChainId.PUPPYNET] : '0x7F561103db907D9865814E8fFFb0cee29BD1B414'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nexport const xSHIB_BONE_MERKLE_DISTRIBUTOR_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0xa2c14852974afE7755eA824260Ca5dF03B816458',\n  [ChainId.ROPSTEN]: '0x731191b7A770b5bF18C592658e98C1021118a1FC',\n  [ChainId.KOVAN]: '0x2918Ab3591c41A21a05e0AD192150AaEBDDfAafC',\n  [ChainId.RINKEBY]: '0x96ffC9220BEe9609D24062699d800d3B32b2f8C5',\n  [ChainId.PUPPYNET] : '0x2918Ab3591c41A21a05e0AD192150AaEBDDfAafC'\n}\n\nexport const xLEASH_BONE_MERKLE_DISTRIBUTOR_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x9495A029Ce34983C0bF0c45EE8214021E95dA26A',\n  [ChainId.ROPSTEN]: '0xaE3A7Ab73acfEcaD995E20dC4DD6e05662fa10AE',\n  [ChainId.KOVAN]: '0xa658AB33537d5F54AB039BeA74E33D1F30A25CA9',\n  [ChainId.RINKEBY]: '0x6A8b4Eff67909aA4e0dDC600016220562419d2F7',\n  [ChainId.PUPPYNET] : '0xa658AB33537d5F54AB039BeA74E33D1F30A25CA9'\n}\n\nexport const xSHIB_WETH_MERKLE_DISTRIBUTOR_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x67E0eb8557437aB7393243c88A11F3c7E424cA3D',\n  [ChainId.ROPSTEN]: '0x075d0E0aBEa664243697898845BbBEaB4e4D8cC3',\n  [ChainId.KOVAN]: '0x73b52f7D4B7261265801Bf90D11E63fC47Af5b78',\n  [ChainId.RINKEBY]: '0x9e7f876580bA07C5E14310cD580B8BBbF7FEB50F',\n  [ChainId.PUPPYNET] : '0x73b52f7D4B7261265801Bf90D11E63fC47Af5b78'\n}\n\nexport const WBTC_MERKLE_DISTRIBUTOR_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x1e26deb7E2b83742384F4DFbb2470947F853a2A4',\n  [ChainId.ROPSTEN]: '0x6fFa825db269a91d2E60C68Ab7A38Fa9abf70D9c',\n  [ChainId.KOVAN]: '0x220ff4180C3926853d5181f094651816c72986c5',\n  [ChainId.RINKEBY]: '0x129175d454D91Df65795640c264752B9B1eB8738',\n  [ChainId.PUPPYNET] : '0x220ff4180C3926853d5181f094651816c72986c5'\n}\n\nexport const USDT_MERKLE_DISTRIBUTOR_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x5140ecB1aA2DAA8427e724A6a5b3893617d8110c',\n  [ChainId.ROPSTEN]: '0x0e31C2d3BDF833114f92a1F0B0897Cb3213E805C',\n  [ChainId.KOVAN]: '0x6D8A147cFa68d6d231133193d02e3bc3fDe6d852',\n  [ChainId.RINKEBY]: '0x8B1336aa37b8129B7e5A7EF5d4EFfEc60B34001E',\n  [ChainId.PUPPYNET] : '0x6D8A147cFa68d6d231133193d02e3bc3fDe6d852'\n}\n\nexport const USDC_MERKLE_DISTRIBUTOR_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x9E1FDDcfCF7c0917371497AC24d27dB764aAE0FE',\n  [ChainId.ROPSTEN]: '0x256c3400c2D196400650B15f07C9F8e88D564B0e',\n  [ChainId.KOVAN]: '0x03197C78F25c3d54862e5a33F255e16317004D3c',\n  [ChainId.RINKEBY]: '0x57793Ea74C545618F8E26B6Ecfbb62205885D1C4',\n  [ChainId.PUPPYNET] : '0x03197C78F25c3d54862e5a33F255e16317004D3c'\n}\n\nexport const DAI_MERKLE_DISTRIBUTOR_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x0075f029648FFbd2026a7df1E9EFf27ebC90Ca65',\n  [ChainId.ROPSTEN]: '0xB2D3f606197a83e48D0377c8BAdcbF0e7CBEE95b',\n  [ChainId.KOVAN]: '0x9aA6C7Dd055c109228644255e63Ee92a13FEC52A',\n  [ChainId.RINKEBY]: '0xbef224eeb6959870511d2280Ce7271c42a2c0B78',\n  [ChainId.PUPPYNET] : '0x9aA6C7Dd055c109228644255e63Ee92a13FEC52A'\n}\n\nexport const tBONE_BONE_MERKLE_DISTRIBUTOR_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0xBaAa2B1F770c8AA0f86203C77A6b01E8315b3238',\n  [ChainId.ROPSTEN]: '0xF4F4Db3EeaF5D1636fADa510cA1726f6280196D4',\n  [ChainId.KOVAN]: '0xB5e57C142737c9ab974048268DfAc89A50DA2E70',\n  [ChainId.RINKEBY]: '0x492C7770375C2F117B5225AabF656f7B1D0C214b',\n  [ChainId.PUPPYNET] : '0xB5e57C142737c9ab974048268DfAc89A50DA2E70'\n}\n\n// Test network addreses are not corerct. Copied from tBone\nexport const XFUND_MERKLE_DISTRIBUTOR_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x6a425fC7Bc4ed7Cfb3cD89cca9925aba3B900BBe',\n  [ChainId.ROPSTEN]: '0xF4F4Db3EeaF5D1636fADa510cA1726f6280196D4',\n  [ChainId.KOVAN]: '0xB5e57C142737c9ab974048268DfAc89A50DA2E70',\n  [ChainId.RINKEBY]: '0x492C7770375C2F117B5225AabF656f7B1D0C214b',\n  [ChainId.PUPPYNET] : '0xB5e57C142737c9ab974048268DfAc89A50DA2E70'\n}\n\n// Test network addreses are not corerct. Copied from tBone\nexport const PERL_MERKLE_DISTRIBUTOR_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x40Ab98602341A294C2b9d6A71266183EDC3EDF76',\n  [ChainId.ROPSTEN]: '0xF4F4Db3EeaF5D1636fADa510cA1726f6280196D4',\n  [ChainId.KOVAN]: '0xB5e57C142737c9ab974048268DfAc89A50DA2E70',\n  [ChainId.RINKEBY]: '0x492C7770375C2F117B5225AabF656f7B1D0C214b',\n  [ChainId.PUPPYNET] : '0xB5e57C142737c9ab974048268DfAc89A50DA2E70'\n}\n\n// Test network addreses are not corerct. Copied from tBone\nexport const F9_MERKLE_DISTRIBUTOR_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x63837C5b60Fb7A29d5E8823A07ee98Df3fA83955',\n  [ChainId.ROPSTEN]: '0xF4F4Db3EeaF5D1636fADa510cA1726f6280196D4',\n  [ChainId.KOVAN]: '0xB5e57C142737c9ab974048268DfAc89A50DA2E70',\n  [ChainId.RINKEBY]: '0x492C7770375C2F117B5225AabF656f7B1D0C214b',\n  [ChainId.PUPPYNET] : '0xB5e57C142737c9ab974048268DfAc89A50DA2E70'\n}\n\n// Test network addreses are not corerct. Copied from tBone\nexport const RYOSHIS_MERKLE_DISTRIBUTOR_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x7732674B5E5FfeC4785AEFdAEa807EeCA383B5e6',\n  [ChainId.ROPSTEN]: '0xF4F4Db3EeaF5D1636fADa510cA1726f6280196D4',\n  [ChainId.KOVAN]: '0xB5e57C142737c9ab974048268DfAc89A50DA2E70',\n  [ChainId.RINKEBY]: '0x492C7770375C2F117B5225AabF656f7B1D0C214b',\n  [ChainId.PUPPYNET] : '0xB5e57C142737c9ab974048268DfAc89A50DA2E70'\n}\n\n// Test network addreses are not corerct. Copied from tBone\nexport const ZIG_MERKLE_DISTRIBUTOR_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x2697B304724f277F4AD498a2792D694917bc640F',\n  [ChainId.ROPSTEN]: '0xF4F4Db3EeaF5D1636fADa510cA1726f6280196D4',\n  [ChainId.KOVAN]: '0xB5e57C142737c9ab974048268DfAc89A50DA2E70',\n  [ChainId.RINKEBY]: '0x492C7770375C2F117B5225AabF656f7B1D0C214b',\n  [ChainId.PUPPYNET] : '0xB5e57C142737c9ab974048268DfAc89A50DA2E70'\n}\n\n// Test network addreses are not corerct. Copied from mainnet\nexport const CIV_MERKLE_DISTRIBUTOR_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x8503Bf17460Aed3d19e5e09BBC2B8d70aA79ec6e',\n  [ChainId.ROPSTEN]: '0x8503Bf17460Aed3d19e5e09BBC2B8d70aA79ec6e',\n  [ChainId.KOVAN]: '0x8503Bf17460Aed3d19e5e09BBC2B8d70aA79ec6e',\n  [ChainId.RINKEBY]: '0x8503Bf17460Aed3d19e5e09BBC2B8d70aA79ec6e',\n  [ChainId.PUPPYNET] : '0x8503Bf17460Aed3d19e5e09BBC2B8d70aA79ec6e'\n}\n\n// Test network addreses are not corerct. Copied from mainnet\nexport const BASIC_BONE_REWARDS_MERKLE_DISTRIBUTOR: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x205c41bf932A34E14fea6b9B25585b3A5903aEeB',\n  [ChainId.ROPSTEN]: '0x205c41bf932A34E14fea6b9B25585b3A5903aEeB',\n  [ChainId.KOVAN]: '0x205c41bf932A34E14fea6b9B25585b3A5903aEeB',\n  [ChainId.RINKEBY]: '0x205c41bf932A34E14fea6b9B25585b3A5903aEeB',\n  [ChainId.PUPPYNET] : '0x205c41bf932A34E14fea6b9B25585b3A5903aEeB'\n}\n\n// Test network addreses are not corerct. Copied from mainnet\nexport const VEMP_MERKLE_DISTRIBUTOR_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0xC2cB0C2bDE7436Fb90C187bA072a5038B3Fd172f',\n  [ChainId.ROPSTEN]: '0xC2cB0C2bDE7436Fb90C187bA072a5038B3Fd172f',\n  [ChainId.KOVAN]: '0xC2cB0C2bDE7436Fb90C187bA072a5038B3Fd172f',\n  [ChainId.RINKEBY]: '0xC2cB0C2bDE7436Fb90C187bA072a5038B3Fd172f',\n  [ChainId.PUPPYNET] : '0xC2cB0C2bDE7436Fb90C187bA072a5038B3Fd172f'\n}\n\n// Test network addreses are not corerct. Copied from mainnet\nexport const UFO_MERKLE_DISTRIBUTOR_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x49b7B2cBa504088Ff94615d8929d41F5535d1877',\n  [ChainId.ROPSTEN]: '0x49b7B2cBa504088Ff94615d8929d41F5535d1877',\n  [ChainId.KOVAN]: '0x49b7B2cBa504088Ff94615d8929d41F5535d1877',\n  [ChainId.RINKEBY]: '0x49b7B2cBa504088Ff94615d8929d41F5535d1877',\n  [ChainId.PUPPYNET] : '0x49b7B2cBa504088Ff94615d8929d41F5535d1877'\n}\n\n// Test network addreses are not corerct. Copied from mainnet\nexport const ARCHIEVE_MERKLE_DISTRIBUTOR_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0xcA335E086de6b546e152A8C67BdB20656750872f',\n  [ChainId.ROPSTEN]: '0xcA335E086de6b546e152A8C67BdB20656750872f',\n  [ChainId.KOVAN]: '0xcA335E086de6b546e152A8C67BdB20656750872f',\n  [ChainId.RINKEBY]: '0xcA335E086de6b546e152A8C67BdB20656750872f',\n  [ChainId.PUPPYNET] : '0xcA335E086de6b546e152A8C67BdB20656750872f'\n}","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ChainId, SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  public static readonly BNB: Currency = new Currency(18, 'BNB', 'Binance Coin')\n\n  public static readonly FTM: Currency = new Currency(18, 'FTM', 'Fantom')\n\n  public static readonly MATIC: Currency = new Currency(18, 'MATIC', 'Matic')\n\n  public static readonly XDAI: Currency = new Currency(18, 'XDAI', 'xDai')\n\n  public static readonly GLMR: Currency = new Currency(18, 'GLMR', 'Glimmer')\n\n  public static readonly AVAX: Currency = new Currency(18, 'AVAX', 'Avalanche')\n\n  public static readonly HT: Currency = new Currency(18, 'HT', 'Heco Token')\n\n  public static readonly ONE: Currency = new Currency(18, 'ONE', 'Harmony')\n\n  public static readonly BONE : Currency = new Currency(18, 'BONE', 'BONE SHIBASWAP')\n\n  public static readonly NATIVE = {\n    [ChainId.MAINNET]: Currency.ETHER,\n    [ChainId.ROPSTEN]: Currency.ETHER,\n    [ChainId.RINKEBY]: Currency.ETHER,\n    [ChainId.GÖRLI]: Currency.ETHER,\n    [ChainId.KOVAN]: Currency.ETHER,\n    [ChainId.FANTOM]: Currency.FTM,\n    [ChainId.FANTOM_TESTNET]: Currency.FTM,\n    [ChainId.MATIC]: Currency.MATIC,\n    [ChainId.MATIC_TESTNET]: Currency.MATIC,\n    [ChainId.XDAI]: Currency.XDAI,\n    [ChainId.BSC]: Currency.BNB,\n    [ChainId.BSC_TESTNET]: Currency.BNB,\n    [ChainId.ARBITRUM]: Currency.ETHER,\n    [ChainId.MOONBASE]: Currency.GLMR,\n    [ChainId.AVALANCHE]: Currency.AVAX,\n    [ChainId.FUJI]: Currency.AVAX,\n    [ChainId.HECO]: Currency.HT,\n    [ChainId.HECO_TESTNET]: Currency.HT,\n    [ChainId.HARMONY]: Currency.ONE,\n    [ChainId.HARMONY_TESTNET]: Currency.ONE,\n    [ChainId.PUPPYNET] : Currency.BONE\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  public static getNativeCurrency(chainId?: ChainId) {\n    if (!chainId) {\n      throw Error(`No chainId ${chainId}`)\n    }\n\n    if (!(chainId in Currency.NATIVE)) {\n      throw Error(`No native currency defined for chainId ${chainId}`)\n    }\n    return Currency.NATIVE[chainId]\n  }\n\n  public static getNativeCurrencySymbol(chainId?: ChainId) {\n    const nativeCurrency = this.getNativeCurrency(chainId)\n    return nativeCurrency.symbol\n  }\n\n  public static getNativeCurrencyName(chainId?: ChainId) {\n    const nativeCurrency = this.getNativeCurrency(chainId)\n    return nativeCurrency.name\n  }\n\n  public getSymbol(chainId?: ChainId) {\n    if (!chainId) {\n      return this?.symbol\n    }\n\n    if (this?.symbol === 'ETH') {\n      return Currency.getNativeCurrencySymbol(chainId)\n    }\n\n    // if (this?.symbol === 'WETH') {\n    //   return `W${Currency.getNativeCurrencySymbol(chainId)}`\n    // }\n\n    return this?.symbol\n  }\n\n  public getName(chainId?: ChainId) {\n    if (!chainId) {\n      return this?.name\n    }\n\n    if (this?.name === 'Ether') {\n      return Currency.getNativeCurrencyName(chainId)\n    }\n\n    return this?.name\n  }\n}\n\nconst ETHER = Currency.ETHER\n\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport {ChainId} from '../constants'\nimport {validateAndParseAddress} from '../utils'\nimport {Currency} from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\n// TODO GOLIVE\n// In reality this is a map of the wrapped version of the native token for a given network.\n// TODO: Rename to WNATIVE for sanity\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417e063141139fce010982780140aa0cd5ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  // [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xa42dC4Ce21514e7d15811b49DD23995eEC5771D0', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xaE15AcEB46f6477543F2BF641d9547FB8607a9fE', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83', 18, 'WFTM', 'Wrapped FTM'),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d', 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM]: new Token(\n    ChainId.ARBITRUM,\n    '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.MOONBASE]: new Token(\n    ChainId.MOONBASE,\n    '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(\n    ChainId.AVALANCHE,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.FUJI]: new Token(ChainId.FUJI, '0xd00ae08403B9bbb9124bB305C09058E32C39A48c', 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.HECO]: new Token(ChainId.HECO, '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F', 18, 'WHT', 'Wrapped HT'),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HARMONY]: new Token(\n    ChainId.HARMONY,\n    '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x7F9A7bcB3494EF9C92E9E381C4a37e159e8efB86', 18, 'TestWETH', 'WETH')\n}\n\nexport type ChainTokenMap = {\n  readonly [chainId in ChainId]?: Token\n}\n\nexport const USDC: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', 6, 'USDC', 'USD Coin'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0x72dd868Fe89113531b18f997844b77563CB665b8', 6, 'USDC', 'USD Coin'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0x5067F6Dbdccd70771352e9d5E5a19DDf6A8fAfdb', 6, 'USDC', 'USD Coin'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x49A04ce101EE69b7ff76691F9EeBD134E581D4eD', 6, 'USDC', 'USD Coin'),\n  [ChainId.GÖRLI] : new Token(ChainId.GÖRLI, '0x8e8355851517aB6606354f59CD3C0e04a93940A8', 6, 'USDC', 'USDC Coin'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x77b0FD79b651FC56D76e2Be0844C3c2cedd3E269', 6, 'USDC', 'USDC Coin')\n}\n\nexport const USDT: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xdAC17F958D2ee523a2206206994597C13D831ec7', 6, 'USDT', 'Tether USD'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0x9E3099cA4bF0FddfAa79AC7C5dA86b0Bd8BA056C', 6, 'USDT', 'Tether USD'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0x3672Aec96464C945F8274BB22Ef1de64398deB44', 6, 'USDT', 'Tether USD'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0xE4B52a9781762E6a8d6cc53fD2D6be83f824971E', 6, 'USDT', 'Tether USD'),\n  [ChainId.GÖRLI] : new Token(ChainId.GÖRLI, '0xaF091A8C0626Fe6af436099c694C6d177D73098A', 6, 'USDT', 'Tether USD'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0xfe16BD53f80Ef31a96413011e2eF20e45bF03A7a', 6, 'USDT', 'Tether USD')\n}\n\nexport const WBTC: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599', 8, 'WBTC', 'Wrapped BTC'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0x3673628B0a9B27480c57026FCddc9Ac16d61A6EA', 8, 'WBTC', 'Wrapped BTC'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0xc59837d0AeBCC6AF23Dcb3c23eb757b07B0EaE0c', 8, 'WBTC', 'Wrapped BTC'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0xe12a4A6a6d0BFe96145D313D4d320bE664F385DF', 8, 'WBTC', 'Wrapped BTC'),\n  [ChainId.GÖRLI] : new Token(ChainId.GÖRLI, '0xE91faCC78F22EF3B47772107830d29B50e05b1Ae', 8, 'WBTC', 'Wrapped BTC'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x81929e00d02AF99187111EE37E0D30588116F2E6', 8, 'WBTC', 'Wrapped BTC')\n}\n\nexport const DAI: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x6B175474E89094C44Da98b954EedeAC495271d0F', 18, 'DAI', 'Dai Stablecoin'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0x560EA439FA3c8ee6A4cE43a2A74320AcE26Aa97a', 18, 'DAI', 'Dai Stablecoin'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0xdd049E9716a7cdeeeaac3890e6721A378ABa71d8', 18, 'DAI', 'Dai Stablecoin'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x102121d11a638eF1AAB9f772dE34Ea0A30cf97eb', 18, 'DAI', 'Dai Stablecoin'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0x0110618BA46C2c47bFc4BE9885f0ea2521b99e97', 18, 'DAI', 'Dai Stablecoin'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x59Bd7dD51462D2a36298DB3219601365f8eb1dA0', 18, 'DAI', 'Dai Stablecoin')\n}\n\n\nexport const BONE: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x9813037ee2218799597d83D4a5B6F3b6778218d9', 18, 'BONE', 'BONE SHIBASWAP'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0x6d4bB7b0559Aebfc55A42cFEAAeb287c01a7f244', 18, 'BONE', 'BONE SHIBASWAP'),\n  [ChainId.ROPSTEN]: new Token(ChainId.KOVAN, '0xD514244ED479A2050c44B448Ec681FaADd8c7429', 18, 'BONE', 'BONE SHIBASWAP'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0xD514244ED479A2050c44B448Ec681FaADd8c7429', 18, 'BONE', 'BONE SHIBASWAP'),\n  [ChainId.GÖRLI] : new Token(ChainId.GÖRLI, '0xBC071C64eD8F536011c78e847755680740d6b73C', 18, 'BONE', 'BONE SHIBASWAP'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x0000000000000000000000000000000000001010', 18, 'BONE', 'BONE SHIBASWAP')\n}\n\n\n//TODO GOLIVE TOCHECK DECIMALS\nexport const SHIBA_INU: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE', 18, 'SHIB', 'SHIBA INU'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0x0b2367E0e56Fd9b63388F1478830c8a4b1bA5963', 18, 'SHIB', 'SHIBA INU'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0xeBAdA3F2883F226BAE65fc0A6404916E965196b5', 18, 'SHIB', 'SHIBA INU'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x658f8c0456265DB1a5fC6BC0A7e8eFd6Fa7F302F', 18, 'SHIB', 'SHIBA INU'),\n  [ChainId.GÖRLI] : new Token(ChainId.GÖRLI, '0x24DC7E3Dee8F69465F73402211093190777BD4D4', 18, 'SHIB', 'SHIBA INU'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x2A5562C952E671c60639f073BaAa6739C6927375', 18, 'SHIB', 'SHIBA INU')\n}\n\n//TODO GOLIVE TOCHECK DECIMALS\nexport const LEASH: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x27C70Cd1946795B66be9d954418546998b546634', 18, 'LEASH', 'DOGE KILLER'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xf90e84b13FaA6a50A5c361a8d35019C4236b1582', 18, 'LEASH', 'DOGE KILLER'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0x806b97D788D401aC2139413b5Aa42E5d408DF572', 18, 'LEASH', 'DOGE KILLER'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0xe74ffE1299D39231058C8B6F5AdE8BbF74eeed72', 18, 'LEASH', 'DOGE KILLER'),\n  [ChainId.GÖRLI] : new Token(ChainId.GÖRLI, '0xF03a16A00E2Bd4de22aBf8d9b6261c0d2eBb1b70', 18, 'LEASH', 'DOGE KILLER'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x848bbFEff983F7ED5B704b11b88008FebccB961d', 18, 'LEASH', 'LEASH')\n}\n\nexport const UNISWAP_TOKEN: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', 18, 'UNI', 'Uniswap'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xf90e84b13FaA6a50A5c361a8d35019C4236b1582', 18, 'UNI', 'Uniswap'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0x066141B68F211E89F1bBBea09B227f380EB783c4', 18, 'UNI', 'Uniswap'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x9a2353315b13E9532c3353B910386947b4DB567D', 18, 'UNI', 'Uniswap'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x9a2353315b13E9532c3353B910386947b4DB567D', 18, 'UNI', 'Uniswap'),\n}\n\nexport const SUSHI_TOKEN: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2', 18, 'SUSHI', 'SushiToken'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xf90e84b13FaA6a50A5c361a8d35019C4236b1582', 18, 'SUSHI', 'SushiToken'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0x1e3f4b46E8ab182aD1ea0544b4fFf9Ff4eD9Fa5B', 18, 'SUSHI', 'SushiToken'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x874c04a195e6696A53E7d856dAe055876fA367f6', 18, 'SUSHI', 'SushiToken'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x874c04a195e6696A53E7d856dAe055876fA367f6', 18, 'SUSHI', 'SushiToken'),\n\n}\n\nexport const LINK_TOKEN: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x514910771AF9Ca656af840dff83E8264EcF986CA', 18, 'LINK', 'ChainLink Token'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xf90e84b13FaA6a50A5c361a8d35019C4236b1582', 18, 'LINK', 'ChainLink Token'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0x856333e55dae762c80208C652671EDf124210Efd', 18, 'LINK', 'ChainLink Token'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0xC597CEDF0708486aC170Acb0e8Ca921008a88dDf', 18, 'LINK', 'ChainLink Token'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0xC597CEDF0708486aC170Acb0e8Ca921008a88dDf', 18, 'LINK', 'ChainLink Token'),\n}\n\nexport const XFUND_TOKEN: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x892A6f9dF0147e5f079b0993F486F9acA3c87881', 9, 'xFUND', 'unification.com/xfund'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xf90e84b13FaA6a50A5c361a8d35019C4236b1582', 9, 'xFUND', 'unification.com/xfund'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0x7fb775eAe1B6Ab3f9a65b6C718C331D3b56d6F25', 9, 'xFUND', 'unification.com/xfund'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x5Ff20Fc8F267C7df40893735776a08de20Eea72a', 9, 'xFUND', 'unification.com/xfund'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x5Ff20Fc8F267C7df40893735776a08de20Eea72a', 9, 'xFUND', 'unification.com/xfund'),\n}\n\nexport const SNX_TOKEN: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F', 18, 'SNX', 'Synthetix Network Token'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xf90e84b13FaA6a50A5c361a8d35019C4236b1582', 18, 'SNX', 'Synthetix Network Token'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0xb5812B65dD0c0819A3cdd1Ae98bEa3871230c1aF', 18, 'SNX', 'Synthetix Network Token'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x176f93342918A86CF53bE0BF595D68e27d2E629E', 18, 'SNX', 'Synthetix Network Token'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x176f93342918A86CF53bE0BF595D68e27d2E629E', 18, 'SNX', 'Synthetix Network Token'),\n}\n\nexport const GRT_TOKEN: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xc944E90C64B2c07662A292be6244BDf05Cda44a7', 18, 'GRT', 'Graph Token'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xf90e84b13FaA6a50A5c361a8d35019C4236b1582', 18, 'GRT', 'Graph Token'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0x499252B5ff27c846B6c2303f333b12A32bBf5EFC', 18, 'GRT', 'Graph Token'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0xE778fAE3298AF5E7dB106246593f29Ae14F18244', 18, 'GRT', 'Graph Token'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0xE778fAE3298AF5E7dB106246593f29Ae14F18244', 18, 'GRT', 'Graph Token'),\n}\n\nexport const MEME_TOKEN: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xD5525D397898e5502075Ea5E830d8914f6F0affe', 8, 'MEME', 'MEME'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xf90e84b13FaA6a50A5c361a8d35019C4236b1582', 8, 'MEME', 'MEME'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0xb50D7AfeC417922BdCD9Da7F36ed4D5FDa14a397', 8, 'MEME', 'MEME'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x349d678CED86Cc0d39B25A0cdF749F9Dde6FD655', 8, 'MEME', 'MEME'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x349d678CED86Cc0d39B25A0cdF749F9Dde6FD655', 8, 'MEME', 'MEME'),\n}\n\nexport const ELON_TOKEN: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x761D38e5ddf6ccf6Cf7c55759d5210750B5D60F3', 18, 'ELON', 'Dogelon'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xf90e84b13FaA6a50A5c361a8d35019C4236b1582', 18, 'ELON', 'Dogelon'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0x60456F41B0De8764fd180d00cF40AD23D5998EF5', 18, 'ELON', 'Dogelon'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x3c188aE815f6a319BE43dc3c53A264C1BB854fe6', 18, 'ELON', 'Dogelon'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x3c188aE815f6a319BE43dc3c53A264C1BB854fe6', 18, 'ELON', 'Dogelon'),\n}\n\nexport const DUCK_TOKEN: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x92E187a03B6CD19CB6AF293ba17F2745Fd2357D5', 18, 'DUCK', 'Unit protocol (DUCK)'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xf90e84b13FaA6a50A5c361a8d35019C4236b1582', 18, 'DUCK', 'Unit protocol (DUCK)'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0x6d8413B2E48Bb2AabC3Cfc3F3D3991EC904C9fC4', 18, 'DUCK', 'Unit protocol (DUCK)'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0xDD5eC7673aC92f647B5d4D8e51205A07e76536A8', 18, 'DUCK', 'Unit protocol (DUCK)'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0xDD5eC7673aC92f647B5d4D8e51205A07e76536A8', 18, 'DUCK', 'Unit protocol (DUCK)'),\n}\n\nexport const VXV_TOKEN: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x7D29A64504629172a429e64183D6673b9dAcbFCe', 18, 'VXV', 'VectorspaceAI'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xf90e84b13FaA6a50A5c361a8d35019C4236b1582', 18, 'VXV', 'VectorspaceAI'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0x6d8413B2E48Bb2AabC3Cfc3F3D3991EC904C9fC4', 18, 'VXV', 'VectorspaceAI'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x6d8413B2E48Bb2AabC3Cfc3F3D3991EC904C9fC4', 18, 'VXV', 'VectorspaceAI'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x6d8413B2E48Bb2AabC3Cfc3F3D3991EC904C9fC4', 18, 'VXV', 'VectorspaceAI'),\n}\n\n// All test net addresses are wrong\nexport const PERL_TOKEN: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xeca82185adCE47f39c684352B0439f030f860318', 18, 'PERL', 'Perlin'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xf90e84b13FaA6a50A5c361a8d35019C4236b1582', 18, 'PERL', 'Perlin'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0x6d8413B2E48Bb2AabC3Cfc3F3D3991EC904C9fC4', 18, 'PERL', 'Perlin'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x6d8413B2E48Bb2AabC3Cfc3F3D3991EC904C9fC4', 18, 'PERL', 'Perlin'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x6d8413B2E48Bb2AabC3Cfc3F3D3991EC904C9fC4', 18, 'PERL', 'Perlin'),\n}\n\n// All test net addresses are wrong\nexport const F9_TOKEN: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x38A94e92A19E970c144DEd0B2DD47278CA11CC1F', 9, 'F9', 'Falcon 9'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xf90e84b13FaA6a50A5c361a8d35019C4236b1582', 9, 'F9', 'Falcon 9'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0x6d8413B2E48Bb2AabC3Cfc3F3D3991EC904C9fC4', 9, 'F9', 'Falcon 9'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x6d8413B2E48Bb2AabC3Cfc3F3D3991EC904C9fC4', 9, 'F9', 'Falcon 9'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x6d8413B2E48Bb2AabC3Cfc3F3D3991EC904C9fC4', 9, 'F9', 'Falcon 9'),\n}\n\n// All test net addresses are wrong\nexport const ZIG_TOKEN: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x7BeBd226154E865954A87650FAefA8F485d36081', 18, 'ZIG', 'ZigCoin'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xf90e84b13FaA6a50A5c361a8d35019C4236b1582', 18, 'ZIG', 'ZigCoin'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0x6d8413B2E48Bb2AabC3Cfc3F3D3991EC904C9fC4', 18, 'ZIG', 'ZigCoin'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x6d8413B2E48Bb2AabC3Cfc3F3D3991EC904C9fC4', 18, 'ZIG', 'ZigCoin'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x6d8413B2E48Bb2AabC3Cfc3F3D3991EC904C9fC4', 18, 'ZIG', 'ZigCoin'),\n}\n\n// All test net addresses are wrong\nexport const RYOSHIS_TOKEN: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x777E2ae845272a2F540ebf6a3D03734A5a8f618e', 18, 'RYOSHI', 'Ryoshis Vision'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xf90e84b13FaA6a50A5c361a8d35019C4236b1582', 18, 'RYOSHI', 'Ryoshis Vision'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0x6d8413B2E48Bb2AabC3Cfc3F3D3991EC904C9fC4', 18, 'RYOSHI', 'Ryoshis Vision'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x6d8413B2E48Bb2AabC3Cfc3F3D3991EC904C9fC4', 18, 'RYOSHI', 'Ryoshis Vision'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x6d8413B2E48Bb2AabC3Cfc3F3D3991EC904C9fC4', 18, 'RYOSHI', 'Ryoshis Vision'),\n}\n\n// All test net addresses are wrong\nexport const CIV_TOKEN: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x37fE0f067FA808fFBDd12891C0858532CFE7361d', 18, 'CIV', 'Civilization'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0x37fE0f067FA808fFBDd12891C0858532CFE7361d', 18, 'CIV', 'Civilization'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0x37fE0f067FA808fFBDd12891C0858532CFE7361d', 18, 'CIV', 'Civilization'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x37fE0f067FA808fFBDd12891C0858532CFE7361d', 18, 'CIV', 'Civilization'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x37fE0f067FA808fFBDd12891C0858532CFE7361d', 18, 'CIV', 'Civilization'),\n}\n\n// All test net addresses are wrong\nexport const VEMP_TOKEN: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xcFEB09C3c5F0f78aD72166D55f9e6E9A60e96eEC', 18, 'VEMP', 'vEmpire Gamer Token'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xcFEB09C3c5F0f78aD72166D55f9e6E9A60e96eEC', 18, 'VEMP', 'vEmpire Gamer Token'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0xcFEB09C3c5F0f78aD72166D55f9e6E9A60e96eEC', 18, 'VEMP', 'vEmpire Gamer Token'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0xcFEB09C3c5F0f78aD72166D55f9e6E9A60e96eEC', 18, 'VEMP', 'vEmpire Gamer Token'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0xcFEB09C3c5F0f78aD72166D55f9e6E9A60e96eEC', 18, 'VEMP', 'vEmpire Gamer Token'),\n}\n\n// All test net addresses are wrong\nexport const UFO_TOKEN: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x249e38Ea4102D0cf8264d3701f1a0E39C4f2DC3B', 18, 'UFO', 'THE TRUTH'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0x249e38Ea4102D0cf8264d3701f1a0E39C4f2DC3B', 18, 'UFO', 'THE TRUTH'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0x249e38Ea4102D0cf8264d3701f1a0E39C4f2DC3B', 18, 'UFO', 'THE TRUTH'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x249e38Ea4102D0cf8264d3701f1a0E39C4f2DC3B', 18, 'UFO', 'THE TRUTH'),\n  [ChainId.PUPPYNET] : new Token(ChainId.PUPPYNET, '0x249e38Ea4102D0cf8264d3701f1a0E39C4f2DC3B', 18, 'UFO', 'THE TRUTH'),\n}","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId,\n  SHIBASWAP_FACTORY_ADDRESS,\n  SHIBA_CODE_HASH\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined && SHIBASWAP_FACTORY_ADDRESS[tokenA.chainId]) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n              SHIBASWAP_FACTORY_ADDRESS[tokenA.chainId],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            SHIBA_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","SHIBA_CODE_HASH","SUSHI_FACTORY_ADDRESS","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","FANTOM","FANTOM_TESTNET","MATIC","MATIC_TESTNET","XDAI","BSC","BSC_TESTNET","ARBITRUM","MOONBASE","AVALANCHE","FUJI","HECO","HECO_TESTNET","HARMONY","HARMONY_TESTNET","PUPPYNET","SHIBASWAP_FACTORY_ADDRESS","SHIBASWAP_ROUTER_ADDRESS","SHIBASWAP_BONE_TOKEN_ADDRESS","SHIBASWAP_BURY_BONE_ADDRESS","SHIBASWAP_BURY_LEASH_ADDRESS","SHIBASWAP_BURY_SHIB_ADDRESS","BONE_LOCKER_ADDRESS","SHIBASWAP_TOPDOG_ADDRESS","SHIBASWAP_UNI_FETCH_ADDRESS","SHIBASWAP_SUSHI_FETCH_ADDRESS","SHIBA_DASHBOARD_1_ADDRESS","SHIBA_DASHBOARD_2_ADDRESS","SHIBASWAP_SHIB_TOKEN_ADDRESS","SHIBASWAP_LEASH_TOKEN_ADDRESS","SHIBASWAP_TIMELOCK_ADDRESS","SHIBA_BORING_HELPER_ADDRESS","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","xSHIB_BONE_MERKLE_DISTRIBUTOR_ADDRESS","xLEASH_BONE_MERKLE_DISTRIBUTOR_ADDRESS","xSHIB_WETH_MERKLE_DISTRIBUTOR_ADDRESS","WBTC_MERKLE_DISTRIBUTOR_ADDRESS","USDT_MERKLE_DISTRIBUTOR_ADDRESS","USDC_MERKLE_DISTRIBUTOR_ADDRESS","DAI_MERKLE_DISTRIBUTOR_ADDRESS","tBONE_BONE_MERKLE_DISTRIBUTOR_ADDRESS","XFUND_MERKLE_DISTRIBUTOR_ADDRESS","PERL_MERKLE_DISTRIBUTOR_ADDRESS","F9_MERKLE_DISTRIBUTOR_ADDRESS","RYOSHIS_MERKLE_DISTRIBUTOR_ADDRESS","ZIG_MERKLE_DISTRIBUTOR_ADDRESS","CIV_MERKLE_DISTRIBUTOR_ADDRESS","BASIC_BONE_REWARDS_MERKLE_DISTRIBUTOR","VEMP_MERKLE_DISTRIBUTOR_ADDRESS","UFO_MERKLE_DISTRIBUTOR_ADDRESS","ARCHIEVE_MERKLE_DISTRIBUTOR_ADDRESS","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","getNativeCurrency","chainId","NATIVE","getNativeCurrencySymbol","this","getNativeCurrencyName","getSymbol","getName","ETHER","FTM","BNB","GLMR","AVAX","HT","BONE","Token","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","USDC","USDT","WBTC","DAI","SHIBA_INU","LEASH","UNISWAP_TOKEN","SUSHI_TOKEN","LINK_TOKEN","XFUND_TOKEN","SNX_TOKEN","GRT_TOKEN","MEME_TOKEN","ELON_TOKEN","DUCK_TOKEN","VXV_TOKEN","PERL_TOKEN","F9_TOKEN","ZIG_TOKEN","RYOSHIS_TOKEN","CIV_TOKEN","VEMP_TOKEN","UFO_TOKEN","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}